
var lexicalOrder = function(n) {
    var result = [];
    // for (var i = 1; i < 9; i++) {
    //     if (i <= n) {
    //         result.push(i);
    //     }

    //     appendNumber2(result, i, n);
    // }

    appendNumber(result, 0, n);

    console.log(result);
};

function appendNumber(result, i, n) {
    if (i * 10 > n) {
        return;
    }

    for (var j = i * 10; j <= i * 10 + 9; j++) {
        if (j === 0) {
            continue;
        }

        if (j <= n) {
            result.push(j);
        }

        appendNumber(result, j, n);
 
    }
}

function appendNumber2(result, i, n) {
    var i = i * 10;
    if (i > n) {
        return;
    }

    for (var j = i; j <= i + 9; j++) {
        if (j <= n) {
            result.push(j);
        }

        appendNumber(result, j, n);
    }
}

lexicalOrder(121);



// var canTransform = function(start, end) {
//     start = start.split('')
//     end = end.split('')

//     while (true) {
//         var swapped = false;
//         var XL = -1;
//         var RX = -1;

//         for (var i = 0; i < start.length; i++) {
//             // console.log("loop ", i, start[i], end[i], XL, RX);
//             if (start[i] === end[i]) {
//                 // if ((XL < 0 && RX < 0) || (start[i] === 'X')) {
//                 //     continue;
//                 // }  
                
//                 if (RX >= 0 && start[i] === 'L') {
//                     // console.log(10);
//                     return false;
//                 } else if (XL >=0 && start[i] === 'R') {
//                     // console.log(20);
//                     return false;
//                 } else {
//                     continue;
//                 }
//             }

//             if (RX < 0 && start[i] === 'X' && end[i] === 'L') {
//                 XL = i;
//                 continue;
//             } else if (XL < 0 && start[i] === 'R' && end[i] === 'X') {
//                 RX = i;
//                 continue;
//             } else if (XL >= 0 && start[i] === 'L' && end[i] === 'X') {
//                 // console.log("XL -> ", XL, RX, i);
//                 swapped = true;
//                 start[XL] = 'L';
//                 start[i] = 'X';
//                 XL = -1;
//                 continue;
//             } else if (RX >= 0 && start[i] === 'X' && end[i] === 'R') {
//                 // console.log("RX -> ", XL, RX, i);
//                 swapped = true;
//                 start[RX] = 'X';
//                 start[i] = 'R';
//                 RX = -1;
//                 continue;
//             } else if (!swapped) {
                
//                 // console.log(start.join(''), '***');
//                 // console.log(30);
//                 return false;
//             }
//         }

//         // console.log(start.join(''), swapped);

//         if (!swapped) {
//             break;
//         }
//     }

//     return start.join('') === end.join('');
// };

// start = "XXRXL"
// end =   "LXRXX"         // false
// var result = canTransform(start, end);
// console.log(result);

// start = "RLX", 
// end =   "XLR";                 // false
// var result = canTransform(start, end);
// console.log(result);

// start = "XLXRRXXRXX"
// end =   "LXXXXXXRRR"
// var result = canTransform(start, end);      // true
// console.log(result);

// start = "XXRXLXRXXX"
// end =   "XXRLXXXXXR"
// var result = canTransform(start, end);      // true
// console.log(result);


// start = "RXXLRXRXL", end = "XRLXXRRLX";     // true
// var result = canTransform(start, end);
// console.log(result);

// // "X"
// // "L"


// start = "LXXLXRLXXL", end = "XLLXRXLXLX";   // false
// var result = canTransform(start, end);
// console.log(result);


// start = "XXXXXLXXXX"                        // true
// end = "LXXXXXXXXX"
// var result = canTransform(start, end);
// console.log(result);















    // // console.log(s, e);
    // for (var i = 0; i < s.length; i++) {
    //     if (s[i] === 'X' && s[i+1] === 'L' 
    //         && s[i] === e[i+1] && s[i+1] === e[i]) {

    //         i++;
    //         continue;
    //     }

    //     if (s[i] === 'R' && s[i+1] === 'X' 
    //         && s[i] === e[i+1] && s[i+1] === e[i]) {

    //         i++;
    //         continue;
    //     }

    //     // console.log(i, start.substring(i));
    //     return false;
    // }


// var canTransform = function(start, end) {
//     start = start.replace(/RX|XR/g, 'A').replace(/LX|XL/g, 'B');
//     end = end.replace(/RX|XR/g, 'A').replace(/LX|XL/g, 'B');
    
//     console.log(start, end);
//     return start === end;
// };


// var canCross = function(stones) {
//     if (stones[0] !== 0 || stones[1] !== 1) {
//         return false;
//     }
    
//     if (stones.length === 2) {
//         return true;
//     }

//     // for (i = stones.length - 1; i > 2; i--) {
//     //     console.log(stones[i], stones[i -1]);
//     //     if (stones[i] > 2 * stones[i - 1]) {
//     //         return false;
//     //     }
//     // }

//     var visited = {};
//     var stoneSet = new Set(stones);
//     return jump(stoneSet, visited, 1, 1, stones[stones.length - 1]);  
// };

// function jump(stones, visited, position, step, last) {
//     if (position === last) {
//         return true;
//     }

//     if (visited[[position,step]]) {
//         return false;
//     }
    
//     var result = false;
    
//     if (stones.has(position + step + 1)) {
//         result = jump(stones, visited, position + step + 1, step + 1, last) || result;
//     }
//     if (result) {
//         return true;
//     }

//     if (stones.has(position + step)) {
//         result = jump(stones, visited, position + step, step, last) || result;
//     }
//     if (result) {
//         return true;
//     }

//     if (step - 1 > 0 && stones.has(position + step - 1)) {
//         result = jump(stones, visited, position + step - 1, step - 1, last) || result; 
//     }
//     if (result) {
//         return true;
//     }

//     visited[[position,step]] = 1;
//     return result;
// }

// var result = canCross([0,1,2,3,4,8,9,11]);
// console.log(result);

// // var result = canCross([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999]);
// // console.log(result);

// // var result = canCross([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,99999999]);
// // console.log(result);

// var array = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,99999999];
// var result = canCross(array);
// console.log(result);

    
    // if (stones[stones.length - 1] > stones.length * (stones.length - 1) /2) {
    //     return false;
    // } 
    // console.log(">>>", position, step);
    
// console.log("<<<", position, step, result);

// var result = canCross([0,1,3,4,5,7,9,10,12]);
// console.log(result);


// 2752


    // var last = 1;
    // for (var i = 2; i < stones.length; i++) {
    //     var distance = stones[i] - stones[i-1];
    //     if (distance <= last + 1 && distance >= last -1) {
    //         last = distance;
    //     } else {
    //         return false;
    //     }
    // }
    
    // return true;

//

// var numSquares = function(n) {
//     var max = Math.floor(Math.sqrt(n));
//     console.log(n, max);

//     var count = n;
//     while (max > 0) {
//         var len = numSquares(n - max * max);
//         if (count > len) {
//             count = len;
//         }
//         max--;
//     }

//     return count + 1;
// }
















// var past = {};
// var squares = [];

// var numSquares = function(n) {
//     if (past[n]) {
//         return past[n];
//     }

//     var max = Math.floor(Math.sqrt(n));
//     if (n === max * max) {
//         return 1;
//     }
    
//     for (var i = squares.length + 1; i <= max; i++) {
//         squares.push(i * i);
//         past[i * i] = 1;
//     }

//     var m = max - 1;     // squares array index begin with 0
//     var minCount = n;
//     while (m >= 0) {
//         var count = 0;
//         var num = n;
//         max = m;
    
//         while (num > 0) {
//             if (past[num]) {
//                 count = count + past[num];
//                 break;
//             }
            
//             for (var i = max; i >= 0; i--) {
//                 if (squares[i] <= num) {
//                     console.log(m, max, i, squares[i], count);
//                     num = num - squares[i];
//                     max = i;
//                     count ++;
//                     break;
//                 }
//             }
            
//             if (count >= minCount) {
//                 break;
//             }
//         }

//         console.log("out loop", m, minCount, count);

//         if (minCount > count && count > 0) {
//             minCount = count;
//         }
//         m--;

//     }

//     return minCount;
// };

// var result = numSquares(133);
// console.log(result);





// var canCross = function(stones) {
//     if (stones[0] !== 0 || stones[1] !== 1) {
//         return false;
//     }
    
//     if (stones.length === 2) {
//         return true;
//     }

//     // for (i = stones.length - 1; i > 2; i--) {
//     //     console.log(stones[i], stones[i -1]);
//     //     if (stones[i] > 2 * stones[i - 1]) {
//     //         return false;
//     //     }
//     // }
    

//     // if (stones[stones.length - 1] > stones[stones.length - 2] * 2) {
//     //     return false;
//     // }

//     var visited = {};
//     var stoneSet = new Set(stones);
//     return jump(stoneSet, visited, 1, 1, stones[stones.length - 1]);  
// };

// var max = -1;
// var jstep = -1;

// function jump(stones, visited, position, step, last) {
//     if (position === last) {
//         return true;
//     }

//     if (visited[[position,step]]) {
//         // console.log('...');
//         return false;
//     }
    
//     var result = false;
    
//     if (stones.has(position + step + 1)) {
//         result = jump(stones, visited, position + step + 1, step + 1, last) || result;
//     }
//     if (result) {
//         return true;
//     }

//     if (stones.has(position + step)) {
//         result = jump(stones, visited, position + step, step, last) || result;
//     }
//     if (result) {
//         return true;
//     }

//     if (step - 1 > 0 && stones.has(position + step - 1)) {
//         result = jump(stones, visited, position + step - 1, step - 1, last) || result; 
//     }
//     if (result) {
//         return true;
//     }

//     visited[[position,step]] = 1;

//     if (step > jstep) {
//         jstep = step;
//         console.log(max, jstep, visited);
//     }
    
//     if (position > max) {
//         max = position;
//         console.log(max, jstep, visited);
//     }
//     return result;
// }
